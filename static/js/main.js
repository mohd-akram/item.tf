// Generated by CoffeeScript 2.7.0
(function() {
  var HoverBox, Item, ItemBox, User, _getAjaxRequest, ajax, capitalize, escapeHTML, getCookie, postAjax, priceSources, root, setCookie,
    indexOf = [].indexOf;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  priceSources = ['backpack.tf'];

  User = class User {
    constructor() {
      this.id = getCookie('steam_id');
      this.loggedIn = Boolean(this.id);
      Object.defineProperties(this, {
        priceSource: {
          get: function() {
            return getCookie('price_source') || priceSources[0];
          },
          set: function(source) {
            return setCookie('price_source', source, 365);
          }
        }
      });
    }

    isOwnPage() {
      var ref;
      return this.loggedIn && this.id === ((ref = document.getElementById('steamid')) != null ? ref.getAttribute('data-id') : void 0);
    }

  };

  Item = class Item {
    constructor(elem) {
      var j, len, price, ref, ref1, ref2, ref3, ref4, ref5, ref6, source;
      this.elem = elem;
      this.name = this.elem.title;
      this.id = this.elem.getAttribute('data-index');
      this.url = this.elem.getAttribute('data-url');
      this.imageURL = this.elem.getAttribute('data-image');
      this.description = this.elem.getAttribute('data-description') || '';
      this.level = this.elem.getAttribute('data-level');
      this.attributes = ((ref = this.elem.getElementsByClassName('attrs')[0]) != null ? ref.innerHTML : void 0) || '';
      this.classes = ((ref1 = this.elem.getAttribute('data-classes')) != null ? ref1.split(',') : void 0) || [];
      this.tags = ((ref2 = this.elem.getAttribute('data-tags')) != null ? ref2.split(',') : void 0) || [];
      this.storePrice = this.elem.getAttribute('data-storeprice');
      this.blueprints = ((ref3 = this.elem.getElementsByClassName('prints')[0]) != null ? ref3.getElementsByTagName('div') : void 0) || [];
      this.prices = {};
      for (j = 0, len = priceSources.length; j < len; j++) {
        source = priceSources[j];
        price = JSON.parse((ref4 = (ref5 = this.elem.getAttribute(`data-${source}`)) != null ? ref5.replace('Collector"s', "Collector's") : void 0) != null ? ref4 : null);
        if (price) {
          this.prices[source] = price;
        }
      }
      this.wishIndex = this.elem.getAttribute('data-i');
      this.qualityNo = (ref6 = this.elem.className.match(/quality-(\d+)/)) != null ? ref6[1] : void 0;
    }

  };

  ItemBox = class ItemBox {
    constructor(showLink = true) {
      this.showLink = showLink;
      this.elem = document.createElement('div');
      this.elem.id = 'itembox';
      document.body.appendChild(this.elem);
    }

    show(item1) {
      var source;
      this.item = item1;
      this.sources = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = priceSources.length; j < len; j++) {
          source = priceSources[j];
          if (source in this.item.prices) {
            results.push(source);
          }
        }
        return results;
      }).call(this);
      this.source = user.priceSource;
      this._generate();
      return this.elem.style.display = 'block';
    }

    hide() {
      return this.elem.style.display = 'none';
    }

    _nextPriceSource() {
      return this.source = this.sources[(this.sources.indexOf(this.source) + 1) % this.sources.length];
    }

    _tagsHTML() {
      var html, i, image, isToken, isWeapon, j, k, len, len1, ref, ref1, title;
      if (this.item.tags.length) {
        html = '<div id="tags">';
        isWeapon = indexOf.call(this.item.tags, 'weapon') >= 0;
        isToken = indexOf.call(this.item.tags, 'token') >= 0;
        ref = ['primary', 'secondary', 'melee', 'pda2'];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          if (indexOf.call(this.item.tags, i) >= 0) {
            if (isWeapon) {
              [title, image] = [`${capitalize(i)} Weapon`, i];
            } else if (isToken) {
              [title, image] = ['Slot Token', 'slot-token'];
            }
          }
        }
        ref1 = ['hat', 'misc', 'tool', 'bundle'];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          i = ref1[k];
          if (indexOf.call(this.item.tags, i) >= 0) {
            [title, image] = [capitalize(i), i];
          }
        }
        if (isToken && this.item.classes.length) {
          [title, image] = ['Class Token', 'class-token'];
        }
        if ((title != null) && (image != null)) {
          html += `<a href="/search?q=${encodeURIComponent(title)}"
 target="_blank" title="${title}" class="${image}"><img
 src="/images/tags.png" alt="${title}"></a>`;
        }
        return html += '</div>';
      } else {
        return '';
      }
    }

    _nameHTML() {
      var html;
      html = this.item.name;
      if (this.showLink) {
        html = `<a href="${this.item.url}"
 class="glow" title="Go to Item Page">${html}</a>`;
      }
      return html = `<h2 id="itemname">${html}</h2>
<i id="shortlinkbutton" class="fa fa-caret-square-down"
 title="Short URL"></i><br>
<div id="shortlink" style="display:none">
<input type="text" value="https://item.tf/${this.item.id}" title="Shortlink"
 readonly><br>
</div>`;
    }

    _classesHTML() {
      var class_, html, j, len, ref;
      if (this.item.classes.length) {
        html = '<div id="classes">';
        ref = this.item.classes;
        for (j = 0, len = ref.length; j < len; j++) {
          class_ = ref[j];
          html += `<a href="/search?q=${class_}" target="_blank"
 title="${class_}" class="${class_.toLowerCase()}"><img
 src="/images/classes.png" alt="${class_}"></a>`;
        }
        return html += '</div>';
      } else {
        return '';
      }
    }

    _bundleHTML() {
      // Link to bundle items HTML
      if (indexOf.call(this.item.tags, 'bundle') >= 0 && this.item.description.indexOf('---') !== -1) {
        return `<a href="/search?q=${encodeURIComponent(this.item.name)}%20Set"
 target="_blank">
<div class="rounded glow" style="display: inline-block; padding: 7px">
View Items
</div>
</a>`;
      } else {
        return '';
      }
    }

    _priceSourceHTML() {
      var denom, denomMatch, html, j, len, price, qualities, quality;
      html = '';
      if (!this.item.prices[this.source]) {
        this._nextPriceSource();
      }
      if (this.item.prices[this.source]) {
        qualities = Object.keys(this.item.prices[this.source]).sort();
        for (j = 0, len = qualities.length; j < len; j++) {
          quality = qualities[j];
          price = this.item.prices[this.source][quality];
          denomMatch = price.match(/(Refined|Key(s)?|Bud(s)?)/);
          if (denomMatch) {
            denom = denomMatch[0];
            price = price.replace(/(\d+(\.\d+)?)/g, `<a href='/search?q=\$1%20${denom}' target='_blank' class='glow'>\$1</a>`);
          }
          html += `<a href="/search?q=${quality}" target="_blank"
 class="${quality.toLowerCase().replace("'", '')}">${quality}</a>: ${price}<br>`;
        }
      }
      return html;
    }

    _pricesHTML() {
      var html;
      html = this._priceSourceHTML();
      if (html) {
        return `<div id='marketprice'><span id='pricesource'>${capitalize(this.source)}</span><div id='prices'>${html}</div></div>`;
      } else {
        return '';
      }
    }

    _blueprintsHTML() {
      var blueprint, chance, html, i, index, item, j, k, l, len, len1, listItem, name, ref, ref1, ref2, url;
      if (this.item.blueprints.length) {
        html = '<ul id="blueprints">';
        ref = this.item.blueprints;
        for (j = 0, len = ref.length; j < len; j++) {
          blueprint = ref[j];
          chance = blueprint.getAttribute('data-chance');
          html += '<li class="blueprint"><ul>';
          ref1 = blueprint.getElementsByTagName('span');
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            item = ref1[k];
            for (i = l = 0, ref2 = item.getAttribute('data-count'); (0 <= ref2 ? l < ref2 : l > ref2); i = 0 <= ref2 ? ++l : --l) {
              name = item.title;
              index = item.getAttribute('data-index');
              listItem = `<img src=\"${item.getAttribute('data-image')}\" alt=\"${name}\">`;
              url = item.getAttribute('data-url');
              html += `<li><a title=\"${name}\" href=\"${url}\" class=\"item-small\" target='_blank'>${listItem}</a></li>`;
            }
          }
          html += `</ul><span title=\"Crafting Chance\" class=\"chance\">${chance}%</span></li>`;
        }
        return html += '</ul>';
      } else {
        return '';
      }
    }

    _tradeHTML() {
      return `<form name="tradeform" method="POST" style="display: inline-block">

  <input type="hidden" name="json">
  <input type="submit" name="submit" value="Search!" style="display: none">

  <select id="quality" class="textbox" title="Quality">
    <option value="6">Unique</option>
    <option value="3">Vintage</option>
    <option value="11">Strange</option>
    <option value="1">Genuine</option>
    <option value="14">Collector's</option>
    <option value="13">Haunted</option>
    <option value="5">Unusual</option>
  </select>

</form>`;
    }

    _wishlistHTML() {
      if (user.loggedIn) {
        return `<div style="display: inline-block;">
<div id="wishlistmessage"
 style="display: none; margin: 0 0 4px -18px">Added</div>
<i id="wishlistbutton" class="fa fa-star fa-lg button-icon"
 title="Add to Wishlist"></i>
</div>`;
      } else {
        return '';
      }
    }

    _buttonsHTML() {
      var wikiLink;
      wikiLink = `https://wiki.teamfortress.com/wiki/${encodeURIComponent(this.item.name)}`;
      return `<div id="buttons">

<a class="fa fa-info fa-lg button-icon" target="_blank"
 title="Open in Wiki" href="${wikiLink}"></a>

<a id="market-btn" class="fa fa-shopping-cart fa-lg button-icon"
 target="_blank" title="Community Market"></a>

<a id="classifieds-btn" class="fa fa-exchange-alt fa-lg button-icon"
 target="_blank" title="Find Trades"></a>

${this._tradeHTML()}
${this._wishlistHTML()}
</div>`;
    }

    _buyHTML() {
      // Buy button and store price HTML
      if (this.item.storePrice) {
        return `<div id="buy">
<form style="display: inline-block">$${this.item.storePrice}<br>
<input type="text" value="1" size="1" id="quantity" title="Quantity"
 class="textbox" style="text-align: right">
</form><a href="#" target="_blank" id="buybutton"><img
 src="https://steamcdn-a.akamaihd.net/apps/tf2/btn_buynow.png"
 alt="Buy Now"></a></div>`;
      } else {
        return '';
      }
    }

    _nameLink() {
      var link, linkButton;
      linkButton = document.getElementById('shortlinkbutton');
      link = document.getElementById('shortlink');
      return linkButton.onclick = function() {
        if (link.style.display === 'none') {
          link.style.display = 'inline';
          linkButton.className = linkButton.className.replace('down', 'up');
          return link.getElementsByTagName('input')[0].select();
        } else {
          link.style.display = 'none';
          return linkButton.className = linkButton.className.replace('up', 'down');
        }
      };
    }

    _pricesLink() {
      var button, prices;
      button = document.getElementById('pricesource');
      prices = document.getElementById('prices');
      if (this.sources.length > 1) {
        button.style.cursor = 'pointer';
        button.onclick = () => {
          this._nextPriceSource();
          button.innerHTML = capitalize(this.source);
          return prices.innerHTML = this._priceSourceHTML();
        };
        button.onmouseover = function() {
          return button.style.textShadow = '0 0 10px rgb(196, 241, 128)';
        };
        return button.onmouseout = function() {
          return button.style.textShadow = '';
        };
      }
    }

    _buttonsLink() {
      return (this.form.quality.onchange = () => {
        var classifieds, market, quality;
        market = document.getElementById('market-btn');
        quality = this.form.quality.options[this.form.quality.selectedIndex].text.toLowerCase().replace('unique', 'Unique').replace('genuine', 'rarity1').replace('unusual', 'rarity4').replace("collector's", 'collectors');
        market.href = `https://steamcommunity.com/market/search?category_440_Type%5B%5D=any&category_440_Quality%5B%5D=tag_${quality}&appid=440&q=${encodeURIComponent(this.item.name)}`;
        classifieds = document.getElementById('classifieds-btn');
        return classifieds.href = `https://backpack.tf/classifieds?item=${encodeURIComponent(this.item.name)}&quality=${this.form.quality.value}`;
      })();
    }

    _wishlistLink() {
      var action, button, idx, j, len, ref, wish;
      // Update wishlist item index
      if (user.isOwnPage()) {
        ref = document.getElementsByClassName('item');
        for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
          wish = ref[idx];
          if (wish.getAttribute('data-i') === this.item.wishIndex) {
            this.item.wishIndex = idx.toString();
            break;
          }
        }
      }
      if (user.loggedIn) {
        action = '/wishlist/add';
        button = document.getElementById('wishlistbutton');
        if (user.isOwnPage()) {
          action = '/wishlist/remove';
          button.title = 'Remove from Wishlist';
        }
        // Add to wishlist or remove from wishlist
        return button.onclick = () => {
          var data;
          data = {
            'index': this.item.id,
            'quality': this.form.quality.value
          };
          if (user.isOwnPage()) {
            data = {
              'i': this.item.wishIndex
            };
          }
          return postAjax(action, data, (response) => {
            var message;
            if (response === 'Added') {
              message = document.getElementById('wishlistmessage');
              message.style.display = 'block';
              message.className = 'animate__animated animate__fadeInLeft';
              return setTimeout((function() {
                return message.className = 'animate__animated animate__fadeOut';
              }), 1000);
            } else if (response === 'Removed') {
              this.hide();
              return this.item.elem.parentNode.parentNode.removeChild(this.item.elem.parentNode);
            }
          });
        };
      }
    }

    _buyLink() {
      var button, quantity;
      button = document.getElementById('buybutton');
      if (button) {
        quantity = document.getElementById('quantity');
        return (quantity.onchange = () => {
          return button.href = `https://store.steampowered.com/buyitem/440/${this.item.id}/${quantity.value}`;
        })();
      }
    }

    _generate() {
      var hoverArea, i, img, j, len, option, ref, results;
      // Itembox HTML
      this.elem.innerHTML = `${this._tagsHTML()}${this._nameHTML()}${this._classesHTML()}
${this._bundleHTML()}
${this._pricesHTML()}
${this._blueprintsHTML()}
${this._buttonsHTML()}${this._buyHTML()}`;
      this.form = document.tradeform;
      this._nameLink();
      this._pricesLink();
      this._buttonsLink();
      this._wishlistLink();
      this._buyLink();
      // Hover area
      hoverArea = document.createElement('div');
      hoverArea.id = 'hoverarea';
      if (this.item.imageURL) {
        img = document.createElement('img');
        img.alt = this.item.name;
        img.src = this.item.imageURL;
        hoverArea.appendChild(img);
      }
      // Add hover area to itembox
      this.elem.insertBefore(hoverArea, document.getElementById('blueprints') || document.getElementById('buttons'));
      // Enable hover box
      new HoverBox(hoverArea, null, this.item);
      // Wishlist item quality
      if (this.item.qualityNo) {
        return this.form.quality.value = this.item.qualityNo;
      // Auto quality selection
      } else if (this.item.prices[this.source]) {
        ref = this.form.quality.options;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          option = ref[i];
          if (option.innerHTML in this.item.prices[this.source]) {
            this.form.quality.selectedIndex = i;
            this.form.quality.onchange();
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    }

  };

  HoverBox = class HoverBox {
    constructor(area, itemBox, item1) {
      this._show = this._show.bind(this);
      this._hide = this._hide.bind(this);
      this._hideItemBox = this._hideItemBox.bind(this);
      this._moveMouse = this._moveMouse.bind(this);
      this._clickItem = this._clickItem.bind(this);
      this.itemBox = itemBox;
      this.item = item1;
      // Allow providing only itemBox
      // Area then becomes all 'item' elements
      if (area instanceof ItemBox) {
        this.itemBox = area;
        area = null;
      }
      this.elem = document.getElementById('hoverbox');
      if (!this.elem) {
        this.elem = document.createElement('div');
        this.elem.id = 'hoverbox';
        document.body.appendChild(this.elem);
      }
      this._add(area);
    }

    _add(area) {
      var event, item, j, k, len, len1, list, ref;
      list = area ? [area] : document.getElementsByClassName('item');
      for (j = 0, len = list.length; j < len; j++) {
        item = list[j];
        item.addEventListener('mouseout', this._hide, false);
        item.addEventListener('mousemove', this._moveMouse, false);
        item.addEventListener('mouseover', this._show, false);
        if (this.itemBox) {
          item.addEventListener('click', this._clickItem, false);
        }
      }
      if (this.itemBox) {
        ref = ['click', 'touchend'];
        // iOS doesn't support 'click' on document
        for (k = 0, len1 = ref.length; k < len1; k++) {
          event = ref[k];
          document.addEventListener(event, this._hideItemBox, false);
        }
        return document.onkeydown = (e) => {
          if (e.keyCode === 27) {
            return this.itemBox.hide();
          }
        };
      }
    }

    _show(e) {
      var descList, description, item;
      item = this.item || new Item(e.currentTarget);
      description = escapeHTML(item.description);
      if (description) {
        if (indexOf.call(item.tags, 'bundle') >= 0 && description.indexOf('---') !== -1) {
          descList = description.split('---');
          description = `${descList[0]}
<span style="color: #95af0c">${descList[1]}</span>`;
        }
      }
      this.elem.innerHTML = `<div class="name">${item.name}</div><span class="level">${item.level}</span>${item.attributes}<div class="desc">${description}</div>`;
      return this.elem.style.display = 'block';
    }

    _hide() {
      return this.elem.style.display = 'none';
    }

    _hideItemBox(e) {
      var el, els, ref;
      el = e.target;
      if (el.className !== 'item') {
        els = [];
        while (el) {
          els.push(el);
          el = el.parentNode;
        }
        if (ref = this.itemBox.elem, indexOf.call(els, ref) < 0) {
          return this.itemBox.hide();
        }
      }
    }

    _moveMouse(e) {
      this.elem.style.top = `${e.pageY + 28}px`;
      return this.elem.style.left = `${e.pageX - 154}px`;
    }

    _clickItem(e) {
      this.itemBox.show(new Item(e.currentTarget));
      e.preventDefault();
      return e.stopPropagation();
    }

  };

  capitalize = function(word) {
    return word[0].toUpperCase() + word.slice(1);
  };

  escapeHTML = function(string) {
    return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };

  getCookie = function(name) {
    var cookie, cookies, j, len;
    cookies = document.cookie.split(';');
    for (j = 0, len = cookies.length; j < len; j++) {
      cookie = cookies[j];
      while (cookie[0] === ' ') {
        cookie = cookie.slice(1);
      }
      if (cookie.slice(0, name.length) === name) {
        return cookie.slice(name.length + 1);
      }
    }
  };

  setCookie = function(name, value, days) {
    var date, expires;
    expires = '';
    if (days) {
      date = new Date();
      date.setDate(date.getDate() + days);
      expires = `;expires=${date.toUTCString()}`;
    }
    return document.cookie = `${name}=${value}${expires}`;
  };

  ajax = function(url, callback) {
    var request;
    request = _getAjaxRequest(callback);
    request.open('GET', url, true);
    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    return request.send();
  };

  postAjax = function(url, data, callback) {
    var name, request, value;
    request = _getAjaxRequest(callback);
    request.open('POST', url, true);
    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    return request.send(((function() {
      var results;
      results = [];
      for (name in data) {
        value = data[name];
        results.push(`${name}=${value}`);
      }
      return results;
    })()).join('&'));
  };

  _getAjaxRequest = function(callback) {
    var request;
    request = new XMLHttpRequest();
    request.onreadystatechange = function() {
      if (request.readyState === 4 && request.status === 200) {
        return callback(request.responseText);
      }
    };
    return request;
  };

  root.user = new User();

  root.Item = Item;

  root.ItemBox = ItemBox;

  root.HoverBox = HoverBox;

}).call(this);

//# sourceMappingURL=main.js.map
